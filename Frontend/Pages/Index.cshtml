@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
    string? userName = HttpContext.Session.GetString("UserName");
    int? userId = HttpContext.Session.GetInt32("UserId");
}

<div class="index-body-container">
    <div class="row">
        <div class="login">
        </div>
        <div class="your-cards-col col-md-3">
            <div class="add-card-by-name">
                <h4>Add card by name</h4>
                <form method="post" asp-page-handler="Card">
                    <input type="text" id="cardName" name="CardName" placeholder="Enter card name" />
                    <input type="hidden" asp-for="UserId" value="@userId" />
                    <input type="submit" value="Add Card" />
                </form>
            </div>
            <div class="add-card-by-select">
                <h4>Selected cards</h4>
                @* <form method="post" asp-page-handler="Cards">
                <input type="hidden" asp-for="UserId" value="@userId" />
                <input type="submit" value="Add Cards" />
                </form> *@
            </div>
            <h4>Your cards</h4>
            <ul class="owned-cards-list">
                @if (!string.IsNullOrEmpty(userName) && Model.OwnedCards != null && Model.OwnedCards.Any())
                {
                    @foreach (var card in Model.OwnedCards)
                    {
                        <li>@card</li>
                    }
                }
            </ul>




        </div>
        <div class="col-md-9 text-center">
            @if (!string.IsNullOrEmpty(userName))
            {
                <h2>Hi @Model.UserName, Select your cards</h2>
            }
            else
            {
                <h2>Select your cards</h2>
            }
            <div class="card-selection">
                <form>
                    <label for="itemDropdown">Set: </label>
                    <select id="itemDropdown" onchange="handleDropdownSelection()">
                        <option value="Select set">Select set</option>
                        @if (Model.Sets != null && Model.Sets.Any())
                        {
                            @foreach (var setname in Model.Sets)
                            {
                                <option value="@setname.Name" key="@setname.Code">@setname.Name</option>
                            }
                        }
                    </select>
                </form>
            </div>
            @if (Model.Cards != null && Model.Cards.Any())
            {
                <div class="cards-displayed card-container">
                    <form method="post" class=" card-container" id="select-cards-form" asp-page-handler="Cards">
                        @for (int i = 0; i < Model.Cards.Count; i++)
                        {
                            <div class="card" key="@Model.Cards[i].Id" onclick="handleCardClick('@Model.Cards[i].Name')">
                                <img src="@Model.Cards[i].ImageUrl" alt="@Model.Cards[i].Name" />
                                <p class="card-text">@Model.Cards[i].Name</p>
                            </div>
                        }
                        <input type="hidden" id="selectedCardsInput" name="SelectedCards" />
                        <button type="button" onclick="submitForm()">Submit</button>
                    </form>
                </div>
            }
            @* @foreach (var card in Model.Cards){
            <div class="card" key="@card.Id" onclick="handleCardClick('@card.Name')">
            <img src="@card.ImageUrl" alt="@card.Name" />
            <p class="card-text">@card.Name</p>
            </div>
            } *@
        </div>
    </div>
</div>

<style>
    .index-body-container {
        padding-top: 40px;
        padding-bottom: 40px;
    }

    .add-card-by-name {
        padding-top: 100px;
        padding-bottom: 40px;
    }


    .owned-cards-list {
        list-style: none;
        padding-left: 2px;
        padding-right: 0;
    }

    .card-selection {
        padding-bottom: 20px;
    }

    .card-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        align-items: center;
    }

    .card {
        max-width: min-content;
        padding: 1rem;
        background-color: inherit;
        border: none;
    }

    img {
        border-radius: 12px;
    }

    .card-text {
        font-size: 1rem;
    }
</style>

<script>

    function handleDropdownSelection() {
        var selectedSet = document.getElementById("itemDropdown");
        var selectedKey = selectedSet.options[selectedSet.selectedIndex].getAttribute("key");

        console.log("Selected key: " + selectedKey);
        var url = "https://api.magicthegathering.io/v1/cards?set=";
        fetch(url + selectedKey)
            .then(response => response.json())
            .then(data => {
                // Generate HTML for cards
                var cardHTML = '';
                data.cards.forEach(function (card) {
                    cardHTML += '<div class="card" key="' + card.id + '">';
                    cardHTML += '<img src="' + card.imageUrl + '" alt="' + card.name + '" />';
                    cardHTML += '<p class="card-text">' + card.name + '</p>';
                    cardHTML += '</div>';
                });
                $(".cards-displayed").html(cardHTML);
            });
    }

    var selectedCards = [];

    function handleCardClick(cardName) {
        //Model.SelectedCards.Add(cardName);
        if (selectedCards.includes(cardName)) {
            selectedCards = selectedCards.filter(item => item !== cardName);
        } else {
            selectedCards.push(cardName);
        }
        console.log(selectedCards);
    }

    function submitForm() {
        document.getElementById("selectedCardsInput").value = selectedCards.join(",");
        //document.getElementById("selectedCardsInput").value
        document.getElementById("select-cards-form").submit();
    }
</script>
