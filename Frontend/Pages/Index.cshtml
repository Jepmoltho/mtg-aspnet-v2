@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
    string? userName = HttpContext.Session.GetString("UserName");
    int? userId = HttpContext.Session.GetInt32("UserId");
}

<div class="index-body-container">
    <div class="row">
        <div class="@userId" id="user">
        </div>
        <div class="your-cards-col col-md-3">
            <div class="set-select-container">
                <h4>Filter by set</h4>
                <form>
                    @* <label for="itemDropdown">Set: </label> *@
                    <select id="itemDropdown" onchange="handleDropdownSelection()">
                        <option value="Select set">Select set</option>
                        @if (Model.Sets != null && Model.Sets.Any())
                        {
                            @foreach (var setname in Model.Sets)
                            {
                                <option value="@setname.Name" key="@setname.Code">@setname.Name</option>
                            }
                        }
                    </select>
                </form>
            </div>
            <div class="add-card-by-name">
                <h4>Add card by name</h4>
                <form method="post" asp-page-handler="Card">
                    <input type="text" id="cardName" name="CardName" placeholder="Enter card name" />
                    <input type="hidden" asp-for="UserId" value="@userId" />
                    <input type="submit" value="Add Card" />
                </form>
            </div>
            <div class="add-card-by-select">
                <h4>Selected cards</h4>
                <div id="selectedCardsList"></div>
                @* <button type="button" id="ajax-submit-button" onclick="submitAjaxForm()">Submit</button> *@
                <button type="button" id="ajax-submit-button-with-info"
                    onclick="submitAjaxFormWithInfo()">Submit</button>
            </div>
            <h4>Your cards</h4>
            <ul class="owned-cards-list">
                @if (!string.IsNullOrEmpty(userName) && Model.OwnedCards != null && Model.OwnedCards.Any())
                {
                    @foreach (var card in Model.OwnedCards)
                    {
                        <li>@card</li>
                    }
                }
            </ul>
        </div>
        <div class="col-md-9 text-center">
            @if (!string.IsNullOrEmpty(userName))
            {
                <h2>Hi @Model.UserName, Select your cards</h2>
            }
            else
            {
                <h2>Select your cards</h2>
            }
            <div class="cards-displayed">
                <div class="card-container" id="select-cards-form">
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .index-body-container {
        padding-top: 60px;
        padding-bottom: 40px;
    }

    .add-card-by-name {
        padding-bottom: 40px;
    }

    .add-card-by-select {
        padding-bottom: 40px;
    }


    .owned-cards-list {
        list-style: none;
        padding-left: 2px;
        padding-right: 0;
    }

    .card-selection {
        padding-bottom: 20px;
    }

    .card-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        align-items: center;
    }

    .card {
        max-width: min-content;
        padding: 1rem;
        background-color: inherit;
        border: none;
    }

    img {
        border-radius: 12px;
    }

    .card-text {
        font-size: 1rem;
    }

    .card:hover {
        cursor: pointer;
        background-color: #e9ecef;
    }

    #selectedCardsList>p {
        margin-bottom: 2px;
    }

    #selectedCardsList {
        padding-bottom: 10px;
    }

    .set-select-container {
        padding-top: 100px;
        padding-bottom: 40px;
        padding-right: 28px;
    }

    #itemDropdown {
        /*Define that max width can be no wider than parent container*/
        max-width: 100%;
    }

    .cards-displayed {
        padding-top: 60px;
    }
</style>

<script>

    function handleDropdownSelection() {
        var selectedSet;
        var selectedKey;
        if (document.getElementById("itemDropdown").selectedIndex == 0) {
            selectedSet = "LEA";
            selectedKey = "LEA";
        } else {
            selectedSet = document.getElementById("itemDropdown");
            selectedKey = selectedSet.options[selectedSet.selectedIndex].getAttribute("key");
        }
        console.log("Selected key: " + selectedKey);
        var url = "https://api.magicthegathering.io/v1/cards?set=";
        fetch(url + selectedKey)
            .then(response => response.json())
            .then(data => {
                // Generate HTML for cards
                var cardHTML = '';
                data.cards.forEach(function (card) {
                    //cardHTML += '<div class="card" key="' + card.id + '" onclick="handleCardClick(\'' + card.name + '\')">';
                    cardHTML += '<div class="card" key="' + card.id + '" onclick="handleCardClickWithInfo(\'' + card.name + '\',\'' + card.id + '\',\'' + card.set + '\',\'' + card.supertypes + '\',\'' + card.imageUrl + '\')">';
                    cardHTML += '<img src="' + card.imageUrl + '" alt="' + card.name + '" />';
                    cardHTML += '<p class="card-text">' + card.name + '</p>';
                    cardHTML += '</div>';
                });
                cardHTML += '<input type="hidden" id="selectedCardsInput" name="SelectedCards" />';
                $(".card-container").html(cardHTML);
            });

    }

    var selectedCards = [];

    function handleCardClick(cardName) {
        if (selectedCards.includes(cardName)) {
            selectedCards = selectedCards.filter(item => item !== cardName);
        } else {
            selectedCards.push(cardName);
        }
        console.log(selectedCards);
        displaySelectedCards();
    }


    function submitAjaxForm() {

        var userid;
        if (document.getElementById("user").classList.length == 0) {
            userid = 0;
            window.alert("Please log in to save your cards");
        } else {
            userid = document.getElementById("user").classList[0];
        }

        var cardNames = selectedCards;

        var data = {
            userId: userid,
            cardNames: cardNames
        };

        fetch('https://localhost:5001/Mtg/cards/' + userid, {
            method: 'POST',
            headers: {
                'Accept': 'text/plain',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
            .then(response => {
                if (response.ok) {
                    return response.text();
                } else {
                    throw new Error('Request failed with status: ' + response.status);
                }
            })
            .then(data => {
                // Handle the response data (if needed)
                console.log('Response:', data);
                window.location.reload();
            })
            .catch(error => {
                // Handle any network or other errors
                console.error('Error:', error);
            });
    }

    var selectedCardsWithInfo = [];

    function handleCardClickWithInfo(cardName, cardMtgId, set, superType, imgUrl) {
        if (selectedCards.includes(cardName)) {
            selectedCardsWithInfo = selectedCards.filter(item => item !== cardName);
        } else {
            selectedCardsWithInfo.push({ cardName, cardMtgId, set, superType, imgUrl });
        }
        console.log(selectedCardsWithInfo);
        //displaySelectedCards();
        displaySelectedCardWithInfo();

    }

    function submitAjaxFormWithInfo() {
        var userid;
        if (document.getElementById("user").classList.length == 0) {
            userid = 0;
            window.alert("Please log in to save your cards");
        } else {
            userid = document.getElementById("user").classList[0];
        }

        var cardObjects = selectedCardsWithInfo.map(card => {
            return {
                mtgCardId: card.cardMtgId,
                title: card.cardName,
                set: card.set,
                superType: card.superType,
                imgUrl: card.imgUrl,
                userId: userid
            };
        });

        console.log(cardObjects);

        var data = {
            userId: userid,
            cards: cardObjects
        };

        fetch('https://localhost:5001/Mtg/cardswithinfo/' + userid, {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
            .then(response => {
                if (response.ok) {
                    return response.json(); // Assuming the server returns JSON
                } else {
                    throw new Error('Request failed with status: ' + response.status);
                }
            })
            .then(data => {
                // Handle the response data (if needed)
                console.log('Response:', data);
                window.location.reload();
            })
            .catch(error => {
                // Handle any network or other errors
                console.error('Error:', error);
            });
    }




    // Display selected cards
    function displaySelectedCards() {
        var selectedCardsList = document.getElementById('selectedCardsList');
        if (selectedCardsList) {
            selectedCardsList.innerHTML = ''; // Clear previous content
            selectedCards.forEach(function (card) {
                var cardElement = document.createElement('p');
                cardElement.textContent = card;
                selectedCardsList.appendChild(cardElement);
            });
        }
    }

    function displaySelectedCardWithInfo() {
        var selectedCardsList = document.getElementById('selectedCardsList');
        if (selectedCardsList) {
            selectedCardsList.innerHTML = ''; // Clear previous content
            selectedCardsWithInfo.forEach(function (card) {
                var cardElement = document.createElement('p');
                cardElement.textContent = card.cardName;
                selectedCardsList.appendChild(cardElement);
            });
        }
    }


    window.onload = handleDropdownSelection();


    @* function submitForm() {
        document.getElementById("selectedCardsInput").value = selectedCards.join(",");
        document.getElementById("select-cards-form").submit();
        } *@

</script>
